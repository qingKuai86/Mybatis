<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--引入外部属性资源文件-->
    <!--resource,一定是从类路径下开始查找资源-->
    <!--<properties resource="jdbc.properties"></properties>-->

    <!--或者在这配置properties属性-->
    <properties>
        <property name="jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
        <property name="jdbc.url" value="jdbc:mysql://localhost:3306/hellomybatis"/>
        <property name="jdbc.username" value="root"/>
        <property name="jdbc.password" value="123456"/>
    </properties>

    <!-- default表示默认使用的环境。-->
    <!--默认环境什么意思?当你使用mybatis创建SqLSessionFactory对象的时候，没有指定环境的话，默认使用哪个环境。-->
    <environments default="testDB">
        <!--其中的一个环境。连按的数据库是test-->
        <!--一般一个数据库会对应一个SqLSessionFactory对象。 -->
        <!--一个环境environment会对应（一个数据库）一个SqLSessionFactory对象-->
        <environment id="testDB">
        <!--
            transactionManager标签:
                1.作用:配置事务管理器。指定mybatis具体使用什么方式去管理事务。
                2. type属性有两个值:
                    第一个: JDBC:使用原生的JDBC代码来管理事务。
                        conn. setAutoCommit(false);
                        conn. commit() ;
                    第二个: MANAGED: mybatis不再负责事务的管理，将事务管理交给其它的JEE(JavaEE)容器来管理。例如: spring
                3.大小写无所谓。不缺分大小写。但是不能写其他值。只能是二选一:
                    jdbc、managed
                4.在mybatis中提供了一个事务管理器接口: Transaction
                    该接口下有两个实现类:
                    JdbcTransaction
                    ManagedTransaction
                    如果type="JDBC",那么底层会实例化Jdbc Transaction对象。
                    如果type="MANAGED",那么底层会实例化ManagedTransaction

        -->
        <transactionManager type="JDBC"/>
    <!--
    dataSource配置:
        1.dataSource被称为数据源。
        2. dataSource作用是什么?为程序提供Connection对象。(但凡是给程序提供Connection对象的，都叫做数据源)。
        3.数据源实际上是一套规范。JDK中有这套规范: javax.sql.DataSource (这个数据源的规范，这套接口实际上是JDK规定的。 )
        4.我们自己也可以编写数据源组件，只要实现javax.sql.DataSource接口就行了。实现接口当中所有的方法。这样就有了自己的数据源。
        比如你可以写个属于自己的数据库连接池(数据库连接池是提供连接对象的，所以数据库连接池就是一个数据源)。
        5.常见的数据源组件有哪些呢[常见的数据库连接池有哪些呢]?
            阿里巴巴的德鲁伊连接池: druid
            c3p0
            dbcp
            ....
        6. type属性用来指定数据源的类型，就是指定具体使用什么方式来获取Connection对象:
            type属性有三个值:必须是三选一。
            type=" [ UNPOOLED | POOLED | JNDI ]
            UNPOOLED: 不使用数据库连接池技术。每一次请求过来之后，都是创建新的Connection对象。
            POOLED: 使用mybatis自己实现的数据库连接池。
            JNDI: 集成其它第三方的数据库连接池。

            INDI是一套规范，谁实现了这套规范呢?大部分的web容器都实现了JNDI规范:
                例如: Tomcat、 Jetty、WebLogic、 WebSphere, 这些服务器(容器)都实现了JNDI规范。
                JNDI是: java命名目录接口。Tomcat服务器实现了这个规范。


    -->

    <dataSource type="POOLED">
        <!--${key}使用-->
        <property name="driver" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </dataSource>
</environment>

<!--这是mybatis的另一个环境，也就是连接的数据库是另一个数据库student-->
        <environment id="studentDB">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!--${key}使用-->
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <mappers>
            <mapper resource="CarMapper.xml"/>
    </mappers>
</configuration>
